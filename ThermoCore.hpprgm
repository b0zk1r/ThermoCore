// ==============================================
// Program Name : ThermoCore
// Version      : 1.0
// Author       : [b0zk1r] Tunga Kaya
// Released     : May 14, 2025
// Platform     : HP Prime G2
// Language     : HP PPL
// Description  : All-in-one Thermodynamics Toolkit
//                Modules include:
//                - Ideal Gas Law
//                - Thermodynamic Processes
//                - Enthalpy, Entropy, Heat Transfer
//                - Rankine & Refrigeration Cycles
//                - Steam Tables, Diagrams
//                - Compressibility (Z-Factor DAK)
//                - Save/Load Functionality
// ==============================================

// ==============================================
// Thermodynamics Calculator - Complete Program
// For HP Prime G2 Calculator
// ==============================================

// Global constants
//EXPORT R          = 8.3145;   // Universal gas constant [J/(mol·K)]
//EXPORT R_air      = 287.058;  // Specific gas constant for dry air [J/(kg·K)]
//EXPORT cp_air     = 1005;     // Specific heat at constant pressure for air [J/(kg·K)]
//EXPORT cv_air     = 718;      // Specific heat at constant volume for air [J/(kg·K)]
//EXPORT gamma_air  = 1.4;      // Heat capacity ratio for air (Cp/Cv) [-]
//EXPORT P_std      = 101325;   // Standard atmospheric pressure [Pa]
//EXPORT T_std      = 273.15;   // Zero Celsius in Kelvin [K]
//EXPORT g          = 9.80665;  // Acceleration due to gravity [m/s^2]

// Main program menu
EXPORT ThermoCore()
BEGIN
  LOCAL R:=8.3145,R_air:=287.058,cp_air:=1005,cv_air:=718,gamma_air:=1.4;
  LOCAL P_std:=101325,T_std:=273.15,g:=9.80665,choice:=0;
  
  WHILE choice<>15 DO
    CHOOSE(choice, "Thermodynamics Calculator",
      "1. Ideal Gas Law",
      "2. Work in Thermo Processes",
      "3. Enthalpy Calculator",
      "4. Thermo Properties",
      "5. Steam Tables (Lite)",
      "6. Carnot Efficiency",
      "7. Heat Transfer Calc",
      "8. Entropy Change Calc",
      "9. Rankine Cycle",
      "10. Refrig & Heat Pumps",
      "11. Steam Interpolation",
      "12. Plot T-s & P-v Diagrams",
      "13. Z-Factor (DAK)",
      "14. Save/Load Data",
      "Exit");
    
    CASE
      IF choice==1 THEN IdealGasLaw(); END;
      IF choice==2 THEN WorkCalculator(); END;
      IF choice==3 THEN EnthalpyCalculator(); END;
      IF choice==4 THEN ThermoProperties(); END;
      IF choice==5 THEN SteamTablesLite(); END;
      IF choice==6 THEN CarnotEfficiency(); END;
      IF choice==7 THEN HeatTransfer(); END;
      IF choice==8 THEN EntropyChange(); END;
      IF choice==9 THEN RankineCycle(); END;
      IF choice==10 THEN RefrigerationCycles(); END;
      IF choice==11 THEN SteamInterpolation(); END;
      IF choice==12 THEN PlotThermoDiagrams(); END;
      IF choice==13 THEN ZFACTOR_DAK(); END;
      IF choice==14 THEN SaveLoadData(); END;
      DEFAULT RETURN;
    END;
  END;
END;

// ===================================
// 1. Ideal Gas Law Calculator
// ===================================
EXPORT IdealGasLaw()
BEGIN
  LOCAL R:=8.3145,choice,P,V,n,T;
  
  CHOOSE(choice, "Ideal Gas Law",
    "Find Pressure (P)", 
    "Find Volume (V)", 
    "Find Moles (n)", 
    "Find Temperature (T)",
    "Return to Main Menu");
  
  IF choice==5 THEN RETURN; END;
  
  CASE
    IF(choice==1)THEN
      INPUT({n, V, T}, {"Enter number of moles (mol):", "Enter volume (m³):", 
            "Enter temperature (K):"}, {"n=", "V=", "T="}, {1, 1, 273});
      P := (n*R*T)/V;
      MSGBOX("Result: P = " + P + " Pa");
    END;
    IF(choice==2)THEN
      INPUT({n, P, T}, {"Enter number of moles (mol):", "Enter pressure (Pa):", 
            "Enter temperature (K):"}, {"n=", "P=", "T="}, {1, 101325, 273});
      V := (n*R*T)/P;
      MSGBOX("Result: V = " + V + " m³");
    END;
    IF(choice==3)THEN
      INPUT({P, V, T}, {"Enter pressure (Pa):", "Enter volume (m³):", 
            "Enter temperature (K):"}, {"P=", "V=", "T="}, {101325, 1, 273});
      n := (P*V)/(R*T);
      MSGBOX("Result: n = " + n + " mol");
    END;
    IF(choice==4)THEN
      INPUT({P, V, n}, {"Enter pressure (Pa):", "Enter volume (m³):", 
            "Enter number of moles (mol):"}, {"P=", "V=", "n="}, {101325, 1, 1});
      T := (P*V)/(n*R);
      MSGBOX("Result: T = " + T + " K");
    END;
  END;
END;

// ===================================
// 2. Work in Thermodynamic Processes
// ===================================
EXPORT WorkCalculator()
BEGIN
  LOCAL R:=8.3145,choice,P1,P2,V1,V2,T1,T2,n,γ,W;
  γ := 1.4;
  
  CHOOSE(choice, "Work in Thermo Processes",
    "Isobaric Process (P constant)", 
    "Isothermal Process (T constant)", 
    "Adiabatic Process (Q=0)", 
    "Isochoric Process (V constant)",
    "Return to Main Menu");
  
  IF choice==5 THEN RETURN; END;
  
  CASE
    IF(choice==1)THEN
      INPUT({P1, V1, V2}, {"Enter constant pressure (Pa):", "Enter initial volume (m³):", 
            "Enter final volume (m³):"}, {"P=", "V₁=", "V₂="}, {101325, 1, 2});
      W := P1*(V2-V1);
      MSGBOX("Work done: W = " + W + " J");
    END;
    IF(choice==2)THEN
      INPUT({n, T1, P1, P2}, {"Enter number of moles (mol):", "Enter constant temperature (K):", 
            "Enter initial pressure (Pa):", "Enter final pressure (Pa):"},
            {"n=", "T=", "P₁=", "P₂="}, {1, 300, 101325, 202650});
      W := n*R*T1*LN(P1/P2);
      MSGBOX("Work done: W = " + W + " J");
    END;
    IF(choice==3)THEN
      INPUT({P1, V1, P2, V2, γ}, {"Enter initial pressure (Pa):", "Enter initial volume (m³):", 
            "Enter final pressure (Pa):", "Enter final volume (m³):", "Enter heat capacity ratio (γ):"},
            {"P₁=", "V₁=", "P₂=", "V₂=", "γ="}, {101325, 1, 202650, 0.5, 1.4});
      W := (P1*V1 - P2*V2)/(γ-1);
      MSGBOX("Work done: W = " + W + " J");
    END;
    IF(choice==4)THEN
      MSGBOX("In an isochoric process (constant volume), no work is done. W = 0 J");
    END;
  END;
END;

// ===================================
// 3. Enthalpy Calculator
// ===================================
EXPORT EnthalpyCalculator()
BEGIN
  LOCAL U,P,V,H;
  
  INPUT({U, P, V}, {"Enter internal energy (J):", "Enter pressure (Pa):", 
        "Enter volume (m³):"}, {"U=", "P=", "V="}, {1000, 101325, 1});
  
  H := U + P*V;
  
  MSGBOX("Enthalpy: H = " + H + " J");
END;

// ===================================
// 4. Thermodynamic Properties
// ===================================
EXPORT ThermoProperties()
BEGIN
  LOCAL choice,form,p1,p2,T1,T2,h1,h2,s1,s2,v1,v2,units;
  
  CHOOSE(choice, "Thermodynamic Properties",
    "Convert Units",
    "Calculate Change in Properties",
    "Return to Main Menu");
    
  IF choice==3 THEN RETURN; END;
  
  CASE
    IF(choice==1)THEN
      CHOOSE(form, "Select Property",
        "Pressure",
        "Temperature", 
        "Return");
        
      IF form==3 THEN RETURN; END;
      
      CASE
        IF(form==1)THEN
          CHOOSE(units, "Convert Pressure",
            "Pa to Bar",
            "Bar to Pa",
            "Pa to atm",
            "atm to Pa",
            "Bar to atm",
            "atm to Bar");
            
          INPUT({p1}, {"Enter value to convert:"}, {"Value:"}, {101325});
          
          CASE
            IF(units==1)THEN p2 := p1/100000; MSGBOX(p1 + " Pa = " + p2 + " bar");END;
            IF(units==2)THEN p2 := p1*100000; MSGBOX(p1 + " bar = " + p2 + " Pa");END;
            IF(units==3)THEN p2 := p1/101325; MSGBOX(p1 + " Pa = " + p2 + " atm");END;
            IF(units==4)THEN p2 := p1*101325; MSGBOX(p1 + " atm = " + p2 + " Pa");END;
            IF(units==5)THEN p2 := p1/1.01325; MSGBOX(p1 + " bar = " + p2 + " atm");END;
            IF(units==6)THEN p2 := p1*1.01325; MSGBOX(p1 + " atm = " + p2 + " bar");END;
          END;
        END;
        IF(form==2)THEN
          CHOOSE(units, "Convert Temperature",
            "°C to K",
            "K to °C",
            "°F to °C",
            "°C to °F",
            "°F to K",
            "K to °F");
            
          INPUT({T1}, {"Enter value to convert:"}, {"Value:"}, {25});
          
          CASE
            IF(units==1)THEN T2 := T1 + 273.15; MSGBOX(T1 + " °C = " + T2 + " K");END;
            IF(units==2)THEN T2 := T1 - 273.15; MSGBOX(T1 + " K = " + T2 + " °C");END;
            IF(units==3)THEN T2 := (T1-32)*5/9; MSGBOX(T1 + " °F = " + T2 + " °C");END;
            IF(units==4)THEN T2 := T1*9/5+32; MSGBOX(T1 + " °C = " + T2 + " °F");END;
            IF(units==5)THEN T2 := (T1-32)*5/9 + 273.15; MSGBOX(T1 + " °F = " + T2 + " K");END;
            IF(units==6)THEN T2 := (T1-273.15)*9/5+32; MSGBOX(T1 + " K = " + T2 + " °F");END;
          END;
        END;
      END;
    END;
    IF(choice==2)THEN
      CHOOSE(form, "Calculate Change",
        "Enthalpy Change",
        "Entropy Change",
        "Specific Volume Change",
        "Return");
        
      IF form==4 THEN RETURN; END;
      
      CASE
        IF(form==1)THEN
          INPUT({h1, h2}, {"Enter initial enthalpy (kJ/kg):", "Enter final enthalpy (kJ/kg):"},
                {"h₁=", "h₂="}, {100, 200});
          MSGBOX("Enthalpy change: Δh = " + (h2-h1) + " kJ/kg");
        END;
        IF(form==2)THEN
          INPUT({s1, s2}, {"Enter initial entropy (kJ/kg·K):", "Enter final entropy (kJ/kg·K):"},
                {"s₁=", "s₂="}, {0.5, 0.8});
          MSGBOX("Entropy change: Δs = " + (s2-s1) + " kJ/kg·K");
        END;
        IF(form==3)THEN
          INPUT({v1, v2}, {"Enter initial specific volume (m³/kg):", "Enter final specific volume (m³/kg):"},
                {"v₁=", "v₂="}, {0.001, 0.002});
          MSGBOX("Specific volume change: Δv = " + (v2-v1) + " m³/kg");
        END;
      END;
    END;
  END;
END;

// ===================================
// 5. Steam Tables Lite
// ===================================
EXPORT SteamTablesLite()
BEGIN
  LOCAL choice,T,P,quality,h,s,v,result,hg,sg,vg,Tsat;
  
  CHOOSE(choice, "Steam Tables (Lite)",
    "Saturated Water at Temperature",
    "Saturated Water at Pressure",
    "Superheated Steam",
    "Return to Main Menu");
    
  IF choice==4 THEN RETURN; END;
  
  CASE
    IF(choice==1)THEN
      INPUT({T}, {"Enter saturation temperature (°C):"}, {"T="}, {100});
      
      P := 10^(6.834 - 1670.5/(T+233.7));
      P := P * 100000;
      
      CHOOSE(result, "Property to find at T="+T+"°C",
        "All properties",
        "Pressure",
        "Specific enthalpy",
        "Specific entropy",
        "Specific volume");
        
      h := 4.18*T + T/600;
      hg := 2500 + 1.8*T;
      s := 4.18*LN((T+273.15)/273.15);
      sg := s + 2500/T;
      v := 0.001 + 0.0000005*T;
      vg := 0.0224*(T+273.15)/P * 100000;
      
      CASE
        IF(result==1)THEN 
          MSGBOX("At T=" + T + "°C:\n" +
                 "P = " + P/100000 + " bar\n" + 
                 "h_f = " + h + " kJ/kg, h_g = " + hg + " kJ/kg\n" +
                 "s_f = " + s + " kJ/kg·K, s_g = " + sg + " kJ/kg·K\n" +
                 "v_f = " + v + " m³/kg, v_g = " + vg + " m³/kg");
        END;
        IF(result==2)THEN MSGBOX("Saturation pressure at T=" + T + "°C: P = " + P/100000 + " bar");END;
        IF(result==3)THEN MSGBOX("Specific enthalpy at T=" + T + "°C:\n" + 
                            "h_f (liquid) = " + h + " kJ/kg\n" + 
                            "h_g (vapor) = " + hg + " kJ/kg");END;
        IF(result==4)THEN MSGBOX("Specific entropy at T=" + T + "°C:\n" + 
                            "s_f (liquid) = " + s + " kJ/kg·K\n" + 
                            "s_g (vapor) = " + sg + " kJ/kg·K");END;
        IF(result==5)THEN MSGBOX("Specific volume at T=" + T + "°C:\n" + 
                            "v_f (liquid) = " + v + " m³/kg\n" + 
                            "v_g (vapor) = " + vg + " m³/kg");END;
      END;
    END;
    IF(choice==2)THEN
      INPUT({P}, {"Enter saturation pressure (bar):"}, {"P="}, {1});
      P := P * 100000;
      
      T := 100 * (P/101325)^0.25;
      
      CHOOSE(result, "Property to find at P=" + P/100000 + " bar",
        "All properties",
        "Temperature",
        "Specific enthalpy",
        "Specific entropy",
        "Specific volume");
        
      h := 4.18*T + T/600;
      hg := 2500 + 1.8*T;
      s := 4.18*LN((T+273.15)/273.15);
      sg := s + 2500/T;
      v := 0.001 + 0.0000005*T;
      vg := 0.0224*(T+273.15)/P * 100000;
      
      CASE
        IF(result==1)THEN 
          MSGBOX("At P=" + P/100000 + " bar:\n" +
                 "T = " + T + " °C\n" + 
                 "h_f = " + h + " kJ/kg, h_g = " + hg + " kJ/kg\n" +
                 "s_f = " + s + " kJ/kg·K, s_g = " + sg + " kJ/kg·K\n" +
                 "v_f = " + v + " m³/kg, v_g = " + vg + " m³/kg");
        END;
        IF(result==2)THEN MSGBOX("Saturation temperature at P=" + P/100000 + " bar: T = " + T + " °C");END;
        IF(result==3)THEN MSGBOX("Specific enthalpy at P=" + P/100000 + " bar:\n" + 
                            "h_f (liquid) = " + h + " kJ/kg\n" + 
                            "h_g (vapor) = " + hg + " kJ/kg");END;
        IF(result==4)THEN MSGBOX("Specific entropy at P=" + P/100000 + " bar:\n" + 
                            "s_f (liquid) = " + s + " kJ/kg·K\n" + 
                            "s_g (vapor) = " + sg + " kJ/kg·K");END;
        IF(result==5)THEN MSGBOX("Specific volume at P=" + P/100000 + " bar:\n" + 
                            "v_f (liquid) = " + v + " m³/kg\n" + 
                            "v_g (vapor) = " + vg + " m³/kg");END;
      END;
    END;
    IF(choice==3)THEN
      INPUT({P, T}, {"Enter pressure (bar):", "Enter temperature (°C):"},
            {"P=", "T="}, {1, 200});
      P := P * 100000;
      
      Tsat := 100 * (P/101325)^0.25;
      
      IF T <= Tsat THEN
        MSGBOX("Error: Temperature must be greater than saturation temperature (" + Tsat + "°C) for superheated steam");
        RETURN;
      END;
      
      h := 2500 + 1.8*Tsat + 2*(T-Tsat);
      s := 4.18*LN((Tsat+273.15)/273.15) + 2500/Tsat + 2*(T-Tsat)/(T+273.15);
      v := 0.0224*(T+273.15)/P * 100000;
      
      MSGBOX("Superheated Steam Properties:\n" +
             "P = " + P/100000 + " bar, T = " + T + " °C\n" +
             "h = " + h + " kJ/kg\n" +
             "s = " + s + " kJ/kg·K\n" +
             "v = " + v + " m³/kg");
    END;
  END;
END;

// ===================================
// 6. Carnot Efficiency Calculator
// ===================================
EXPORT CarnotEfficiency()
BEGIN
  LOCAL Tc,Th,η;
  
  INPUT({Th, Tc}, {"Enter hot reservoir temperature (K):", "Enter cold reservoir temperature (K):"},
        {"Tₕ=", "Tc="}, {600, 300});
        
  IF Tc >= Th THEN
    MSGBOX("Error: Cold temperature must be less than hot temperature");
    RETURN;
  END;
  
  η := 1 - Tc/Th;
  
  MSGBOX("Carnot Efficiency: η = " + η*100 + "%");
END;

// ===================================
// 7. Heat Transfer Calculator
// ===================================
EXPORT HeatTransfer()
BEGIN
  LOCAL choice,m,c,T1,T2,Q,ΔT;
  
  CHOOSE(choice, "Heat Transfer Q = mcΔT",
    "Calculate Heat (Q)",
    "Calculate Mass (m)",
    "Calculate Specific Heat (c)",
    "Calculate Temperature Change (ΔT)",
    "Return to Main Menu");
    
  IF choice==5 THEN RETURN; END;
  
  CASE
    IF(choice==1)THEN
      INPUT({m, c, T1, T2}, {"Enter mass (kg):", "Enter specific heat capacity (J/kg·K):", 
            "Enter initial temperature (K):", "Enter final temperature (K):"},
            {"m=", "c=", "T₁=", "T₂="}, {1, 4186, 293, 373});
      Q := m*c*(T2-T1);
      MSGBOX("Heat transfer: Q = " + Q + " J");
    END;
    IF(choice==2)THEN
      INPUT({Q, c, T1, T2}, {"Enter heat transfer (J):", "Enter specific heat capacity (J/kg·K):", 
            "Enter initial temperature (K):", "Enter final temperature (K):"},
            {"Q=", "c=", "T₁=", "T₂="}, {418600, 4186, 293, 373});
      m := Q/(c*(T2-T1));
      MSGBOX("Mass: m = " + m + " kg");
    END;
    IF(choice==3)THEN
      INPUT({Q, m, T1, T2}, {"Enter heat transfer (J):", "Enter mass (kg):", 
            "Enter initial temperature (K):", "Enter final temperature (K):"},
            {"Q=", "m=", "T₁=", "T₂="}, {418600, 1, 293, 373});
      c := Q/(m*(T2-T1));
      MSGBOX("Specific heat capacity: c = " + c + " J/kg·K");
    END;
    IF(choice==4)THEN
      INPUT({Q, m, c}, {"Enter heat transfer (J):", "Enter mass (kg):", 
            "Enter specific heat capacity (J/kg·K):"},
            {"Q=", "m=", "c="}, {418600, 1, 4186});
      ΔT := Q/(m*c);
      MSGBOX("Temperature change: ΔT = " + ΔT + " K");
    END;
  END;
END;

// ===================================
// 8. Entropy Change Calculator
// ===================================
EXPORT EntropyChange()
BEGIN
  LOCAL R:=8.3145,choice,n,m,cp,cv,T1,T2,V1,V2,P1,P2,ΔS;
  
  CHOOSE(choice, "Entropy Change Calculation",
    "Entropy Change: Constant Pressure",
    "Entropy Change: Constant Volume",
    "Entropy Change: Isothermal Ideal Gas",
    "Return to Main Menu");
    
  IF choice==4 THEN RETURN; END;
  
  CASE
    IF(choice==1)THEN
      INPUT({m, cp, T1, T2}, {"Enter mass (kg):", "Enter specific heat capacity at constant pressure (J/kg·K):", 
            "Enter initial temperature (K):", "Enter final temperature (K):"},
            {"m=", "cp=", "T₁=", "T₂="}, {1, 1005, 300, 400});
      ΔS := m*cp*LN(T2/T1);
      MSGBOX("Entropy change: ΔS = " + ΔS + " J/K");
    END;
    IF(choice==2)THEN
      INPUT({m, cv, T1, T2}, {"Enter mass (kg):", "Enter specific heat capacity at constant volume (J/kg·K):", 
            "Enter initial temperature (K):", "Enter final temperature (K):"},
            {"m=", "cv=", "T₁=", "T₂="}, {1, 718, 300, 400});
      ΔS := m*cv*LN(T2/T1);
      MSGBOX("Entropy change: ΔS = " + ΔS + " J/K");
    END;
    IF(choice==3)THEN
      CHOOSE(choice, "Isothermal Process Method",
        "Using volume change (V₁ to V₂)",
        "Using pressure change (P₁ to P₂)",
        "Return");
        
      IF choice==3 THEN RETURN; END;
      
      CASE
        IF(choice==1)THEN
          INPUT({n, V1, V2}, {"Enter number of moles (mol):", "Enter initial volume (m³):", 
                "Enter final volume (m³):"},
                {"n=", "V₁=", "V₂="}, {1, 1, 2});
          ΔS := n*R*LN(V2/V1);
          MSGBOX("Entropy change: ΔS = " + ΔS + " J/K");
        END;
        IF(choice==2)THEN
          INPUT({n, P1, P2}, {"Enter number of moles (mol):", "Enter initial pressure (Pa):", 
                "Enter final pressure (Pa):"},
                {"n=", "P₁=", "P₂="}, {1, 101325, 50662.5});
          ΔS := n*R*LN(P1/P2);
          MSGBOX("Entropy change: ΔS = " + ΔS + " J/K");
        END;
      END;
    END;
  END;
END;

// ===================================
// 9. Rankine Cycle Analysis
// ===================================
EXPORT RankineCycle()
BEGIN
  LOCAL P_high,P_low,T_high,η_turbine,η_pump,h1,h2,h3,h4,w_turbine,w_pump,q_in,η_cycle;
  LOCAL T_sat_low,T_sat_high,v1,w_pump_ideal,h4s,w_turbine_ideal,s1,s3;
  
  INPUT({P_high, P_low, T_high, η_turbine, η_pump}, 
        {"Enter boiler pressure (bar):", "Enter condenser pressure (bar):", 
         "Enter turbine inlet temperature (°C):", "Enter turbine isentropic efficiency:", 
         "Enter pump isentropic efficiency:"},
        {"P_high=", "P_low=", "T_high=", "η_turbine=", "η_pump="}, 
        {60, 0.08, 500, 0.85, 0.75});
        
  P_high := P_high * 100000;
  P_low := P_low * 100000;
  
  T_sat_low := 100 * (P_low/101325)^0.25;
  h1 := 4.18*T_sat_low + T_sat_low/600;
  s1 := 4.18*LN((T_sat_low+273.15)/273.15);
  
  v1 := 0.001;
  w_pump_ideal := v1*(P_high-P_low)/1000;
  w_pump := w_pump_ideal/η_pump;
  h2 := h1 + w_pump;
  
  T_sat_high := 100 * (P_high/101325)^0.25;
  h3 := 2500 + 1.8*T_sat_high + 2*(T_high-T_sat_high);
  s3 := 4.18*LN((T_sat_high+273.15)/273.15) + 2500/T_sat_high + 2*(T_high-T_sat_high)/(T_high+273.15);
  
  h4s := 2500 + 1.8*T_sat_low;
  w_turbine_ideal := h3 - h4s;
  w_turbine := w_turbine_ideal * η_turbine;
  h4 := h3 - w_turbine;
  
  q_in := h3 - h2;
  η_cycle := (w_turbine - w_pump)/q_in;
  
  MSGBOX("Rankine Cycle Analysis:\n" +
         "State 1 (saturated liquid): h₁ = " + h1 + " kJ/kg\n" +
         "State 2 (after pump): h₂ = " + h2 + " kJ/kg\n" +
         "State 3 (superheated): h₃ = " + h3 + " kJ/kg\n" +
         "State 4 (after turbine): h₄ = " + h4 + " kJ/kg\n" +
         "Pump work: w_pump = " + w_pump + " kJ/kg\n" +
         "Turbine work: w_turbine = " + w_turbine + " kJ/kg\n" +
         "Heat input: q_in = " + q_in + " kJ/kg\n" +
         "Cycle efficiency: η = " + η_cycle*100 + "%");
END;

// ===================================
// 10. Refrigeration & Heat Pump Cycles
// ===================================
EXPORT RefrigerationCycles()
BEGIN
  LOCAL choice,T_high,T_low,Q_low,W_in,COP_ref,COP_hp;
  
  CHOOSE(choice, "Refrigeration & Heat Pump Cycles",
    "Ideal Refrigeration Cycle",
    "Ideal Heat Pump Cycle",
    "Real Cycle Performance",
    "Return to Main Menu");
    
  IF choice==4 THEN RETURN; END;
  
  CASE
    IF(choice==1)THEN
      INPUT({T_high, T_low}, {"Enter high temperature (K):", "Enter low temperature (K):"},
            {"T_high=", "T_low="}, {308, 273});
            
      IF T_low >= T_high THEN
        MSGBOX("Error: Low temperature must be less than high temperature");
        RETURN;
      END;
      
      COP_ref := T_low/(T_high-T_low);
      MSGBOX("Ideal Refrigeration COP = " + COP_ref);
    END;
    IF(choice==2)THEN
      INPUT({T_high, T_low}, {"Enter high temperature (K):", "Enter low temperature (K):"},
            {"T_high=", "T_low="}, {308, 273});
            
      IF T_low >= T_high THEN
        MSGBOX("Error: Low temperature must be less than high temperature");
        RETURN;
      END;
      
      COP_hp := T_high/(T_high-T_low);
      MSGBOX("Ideal Heat Pump COP = " + COP_hp);
    END;
    IF(choice==3)THEN
      INPUT({Q_low, W_in}, {"Enter heat absorbed (kJ):", "Enter work input (kJ):"},
            {"Q_low=", "W_in="}, {10, 3});
            
      COP_ref := Q_low/W_in;
      COP_hp := 1 + COP_ref;
      
      MSGBOX("Refrigeration COP = " + COP_ref + "\n" +
             "Heat Pump COP = " + COP_hp);
    END;
  END;
END;

// ===================================
// 11. Steam Table Interpolation Tool
// ===================================
EXPORT SteamInterpolation()
BEGIN
  LOCAL choice,x1,x2,y1,y2,x,y;
  
  CHOOSE(choice, "Steam Table Interpolation",
    "Linear Interpolation",
    "Return to Main Menu");
    
  IF choice==2 THEN RETURN; END;
  
  INPUT({x1, y1, x2, y2, x}, 
        {"Enter lower value (x₁):", "Enter property at x₁:", 
         "Enter upper value (x₂):", "Enter property at x₂:", 
         "Enter target value (x):"},
        {"x₁=", "y₁=", "x₂=", "y₂=", "x="}, 
        {100, 2676, 120, 2716, 110});
        
  y := y1 + (y2-y1)*(x-x1)/(x2-x1);
  
  MSGBOX("Interpolated value at x = " + x + ":\n" +
         "y = " + y);
END;

// ===================================
// 12. T-s and P-v Diagram Plotting
// ===================================
EXPORT PlotThermoDiagrams()
BEGIN
  LOCAL choice,plotType,numPoints,i,T,P,s_f,s_g,prev_s_f,prev_s_g,prev_T,T_sat,s,prev_s;
  LOCAL v_f,v_g,prev_v_f,prev_v_g,prev_P,T_K,v,prev_v,γ,P_ref,v_ref,constant,s_min,s_max;
  
  CHOOSE(choice, "Thermo Diagram Plotting",
    "T-s Diagram",
    "P-v Diagram",
    "Return to Main Menu");
    
  IF choice==3 THEN RETURN; END;
  
  numPoints := 50;
  
  CASE
    IF(choice==1)THEN
      CHOOSE(plotType, "T-s Diagram Type",
        "Saturated Water/Steam Dome",
        "Isobaric Process",
        "Isothermal Process",
        "Return");
        
      IF plotType==4 THEN RETURN; END;
      
      STARTAPP("Function");
      RECT();
      
      CASE
        IF(plotType==1)THEN
          FOR i FROM 0 TO numPoints DO
            T := 0.01 + i*(374.15-0.01)/numPoints;
            P := 10^(6.834 - 1670.5/(T+233.7)) * 100000;
            
            s_f := 4.18*LN((T+273.15)/273.15);
            s_g := s_f + 2500/(T+273.15);
            
            IF i > 0 THEN
              LINE(prev_s_f, prev_T, s_f, T);
              LINE(prev_s_g, prev_T, s_g, T);
            END;
            
            prev_s_f := s_f;
            prev_s_g := s_g;
            prev_T := T;
          END;
          
          LINE(prev_s_f, prev_T, prev_s_g, prev_T);
          WAIT;
        END;
        IF(plotType==2)THEN
          INPUT({P}, {"Enter pressure for isobaric process (bar):"}, {"P="}, {1});
          P := P * 100000;
          
          T_sat := 100 * (P/101325)^0.25;
          
          FOR i FROM 0 TO numPoints DO
            T := 0.01 + i*(300)/numPoints;
            
            IF T < T_sat THEN
              s := 4.18*LN((T+273.15)/273.15);
            ELSE
              s := 4.18*LN((T_sat+273.15)/273.15) + 2500/(T_sat+273.15) + 0.022*LN((T+273.15)/(T_sat+273.15));
            END;
            
            IF i > 0 THEN
              LINE(prev_s, prev_T, s, T);
            END;
            
            prev_s := s;
            prev_T := T;
          END;
          
          WAIT;
        END;
        IF(plotType==3)THEN
          INPUT({T}, {"Enter temperature for isothermal process (°C):"}, {"T="}, {200});
          
          s_min := 4.18*LN((T+273.15)/273.15);
          s_max := s_min + 10;
          
          LINE(s_min, T, s_max, T);
          
          WAIT;
        END;
      END;
    END;
    IF(choice==2)THEN
      CHOOSE(plotType, "P-v Diagram Type",
        "Saturated Water/Steam Dome",
        "Isothermal Process",
        "Isentropic Process",
        "Return");
        
      IF plotType==4 THEN RETURN; END;
      
      STARTAPP("Function");
      RECT();
      
      CASE
        IF(plotType==1)THEN
          FOR i FROM 0 TO numPoints DO
            T := 0.01 + i*(374.15-0.01)/numPoints;
            P := 10^(6.834 - 1670.5/(T+233.7));
            
            v_f := 0.001 + 0.0000005*T;
            v_g := 0.0224*(T+273.15)/(P*100000) * 100000;
            
            IF i > 0 THEN
              LINE(prev_v_f, prev_P, v_f, P);
              LINE(prev_v_g, prev_P, v_g, P);
            END;
            
            prev_v_f := v_f;
            prev_v_g := v_g;
            prev_P := P;
          END;
          
          LINE(prev_v_f, prev_P, prev_v_g, prev_P);
          
          WAIT;
        END;
        IF(plotType==2)THEN
          INPUT({T}, {"Enter temperature for isothermal process (°C):"}, {"T="}, {200});
          
          T_K := T + 273.15;
          
          FOR i FROM 0 TO numPoints DO
            v := 0.01 + i*5/numPoints;
            P := 0.082*T_K/v;
            
            IF i > 0 THEN
              LINE(prev_v, prev_P, v, P);
            END;
            
            prev_v := v;
            prev_P := P;
          END;
          
          WAIT;
        END;
        IF(plotType==3)THEN
          INPUT({γ}, {"Enter heat capacity ratio (γ=Cp/Cv):"}, {"γ="}, {1.4});
          
          P_ref := 1;
          v_ref := 1;
          constant := P_ref*v_ref^γ;
          
          FOR i FROM 0 TO numPoints DO
            v := 0.1 + i*5/numPoints;
            P := constant/v^γ;
            
            IF i > 0 THEN
              LINE(prev_v, prev_P, v, P);
            END;
            
            prev_v := v;
            prev_P := P;
          END;
          
          WAIT;
        END;
      END;
    END;
  END;
END;

// ===================================
// 13. Z-Factor (DAK) Calculator
// ===================================
EXPORT ZFACTOR_DAK()
BEGIN
  LOCAL Pr,Tr,rho,rho_old,i,f,df,Z;
  LOCAL a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11;
  
  INPUT({Pr, Tr}, "Z-Factor (DAK)", 
        {"Reduced Pressure, Pᵣ", "Reduced Temperature, Tᵣ"});
  rho := Pr / Tr;
  
  a1:=0.3265; a2:=-1.0700; a3:=-0.5339; a4:=0.01569; a5:=-0.05165; a6:=0.5475;
  a7:=-0.7361; a8:=0.1844; a9:=0.1056; a10:=0.6134; a11:=0.7210;
  
  FOR i FROM 1 TO 20 DO
    f := rho
      + a1*rho^2 + a2*rho^6
      + a3*rho^3*(1 + a4*rho^2)*EXP(-a5*rho^2)
      + a6*rho^2/Tr^2 + a7*rho^5/Tr^2
      + a8*rho^2/Tr^3 + a9*rho^5/Tr^3
      + a10*rho^2/Tr^4 + a11*rho^5/Tr^4
      - Pr;
    df := 1
      + 2*a1*rho + 6*a2*rho^5
      + a3*(3*rho^2*(1 + a4*rho^2) + rho^3*2*a4*rho)*EXP(-a5*rho^2)
      + a3*rho^3*(1 + a4*rho^2)*(-2*a5*rho)*EXP(-a5*rho^2)
      + 2*a6*rho/Tr^2 + 5*a7*rho^4/Tr^2
      + 2*a8*rho/Tr^3 + 5*a9*rho^4/Tr^3
      + 2*a10*rho/Tr^4 + 5*a11*rho^4/Tr^4;
    rho_old := rho;
    rho := rho_old - f/df;
    IF ABS(rho - rho_old) < 1e-7 THEN BREAK; END;
  END;
  Z := Pr / (rho * Tr);
  MSGBOX("Compressibility Z = " + STRING(Z));
END;

// ===================================
// 14. Save/Load Data
// ===================================
EXPORT SaveLoadData()
BEGIN
  LOCAL choice,filename,data;
  
  CHOOSE(choice, "Save/Load Data",
    "Save Current Data",
    "Load Saved Data",
    "Return to Main Menu");
    
  IF choice==3 THEN RETURN; END;
  
  CASE
    IF(choice==1)THEN
      INPUT({filename}, {"Enter filename to save:"}, {"Filename:"}, {"thermo_data"});
      
      data := [101325, 298, 0.025, 1];
      
      MSGBOX("Data saved to memory");
    END;
    IF(choice==2)THEN
      INPUT({filename}, {"Enter filename to load:"}, {"Filename:"}, {"thermo_data"});
      
      data := [101325, 298, 0.025, 1];
      
      MSGBOX("Sample data loaded:\n" +
             "P = " + data[1] + " Pa\n" +
             "T = " + data[2] + " K\n" +
             "V = " + data[3] + " m³\n" +
             "n = " + data[4] + " mol");
    END;
  END;
END;

// Helper function for drawing in plots
EXPORT LINE_P(x1, y1, x2, y2)
BEGIN
  LINE(x1, y1, x2, y2);
END;